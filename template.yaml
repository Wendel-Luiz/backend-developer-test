AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-plooral

Globals:
  Function:
    Timeout: 3
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  S3JobFeed:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "job-feed-plooral-challenge-wendel"
      PublicAccessBlockConfiguration:
        BlockPublicAcls       : true
        BlockPublicPolicy     : false
        IgnorePublicAcls      : true
        RestrictPublicBuckets : false

  JobModerationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: job-moderation-queue

  FeedWriterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/serverless/feed-writer
      Handler: app.handler
      Runtime: nodejs20.x
      Role: !GetAtt S3ExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: "NODE_ENV"
          DB_NAME: "DB_NAME"
          DB_HOST: "DB_HOST"
          DB_USER: "DB_USER"
          DB_PASSWORD: "DB_PASSWORD"
          DB_PORT: "DB_PORT"
          DB_MAX_CONNECTIONS: "DB_MAX_CONNECTIONS"
          BUCKET: "BUCKET"
          S3KEY: "S3KEY"
      Architectures:
      - x86_64
      Events:
        ProduceHTTP:
          Type: Api
          Properties:
            Path: /feed
            Method: post
        ProduceCron:
          Type: ScheduleV2
          Properties:
            Name: S3ProducerFunction
            ScheduleExpression: 'rate(5 minute)'
            Description: Function that saves the feed into S3
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  FeedReaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt S3ExecutionRole.Arn
      CodeUri: packages/serverless/feed-reader
      Handler: app.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET: "BUCKET"
          S3KEY: "S3KEY"
      Events:
        ReadFeedHttp:
          Type: HttpApi
          Properties:
            Method: get
            Path: /feed
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - app.ts

  JobModerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/serverless/job-moderator
      Handler: app.handler
      Runtime: nodejs20.x
      Role: !GetAtt S3ExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: "NODE_ENV"
          DB_NAME: "DB_NAME"
          DB_HOST: "DB_HOST"
          DB_USER: "DB_USER"
          DB_PASSWORD: "DB_PASSWORD"
          DB_PORT: "DB_PORT"
          DB_MAX_CONNECTIONS: "DB_MAX_CONNECTIONS"
          OPEN_AI_KEY: "OPEN_AI_KEY"
      Architectures:
      - x86_64
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt JobModerationQueue.Arn
            BatchSize:  10
            Enabled: true
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  S3ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3JobFeed}'
                  - !Sub 'arn:aws:s3:::${S3JobFeed}/*'
